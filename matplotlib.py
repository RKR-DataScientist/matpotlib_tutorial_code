# -*- coding: utf-8 -*-
"""Matplotlib.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/17IsKYvGsYIMZ9yLjvvvh6X61Su9ab74h

#Matplotlib (Python Plotting Library)

Human minds are more adaptive for the visual representation of data rather than textual data. We can easily understand things when they are visualized. It is better to represent the data through the graph where we can analyze the data more efficiently and make the specific decision according to data analysis.

**TO INstall Matplotlib**
pip install matplotlib
"""

import matplotlib.pyplot as plt
from matplotlib import style
import numpy as np
import random

"""## Creating different types of graph

### 1. Line graph

The pyplot.plot() or plt.plot() is a method of matplotlib pyplot module use to plot the line.

**Syntax: plt.plot(*args, scalex=True, scaley=True, data=None, **kwargs)**
"""

# Suppose we have the dataframe
days = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]
temperature = [36.6, 37, 37.7,39,40.1,43,43.4,45,45.6,40.1,44,45,46.8,47,47.8]

# Let's plot first to see the graph
plt.plot(days, temperature) # Assigned the varible values
plt.show()  # Showed the result

# To show the axis of the graph and legeds means labels
plt.plot(days, temperature)
plt.title(" Delhi Temprature")
plt.xlabel(" Days ")
plt.ylabel(" Temprature ")
plt.show

# If we have to set the axis value to represent graph from any values along with color 
plt.plot(days, temperature )
plt.axis([0,30, 0,50])
plt.title(" Delhi Temprature")
plt.xlabel(" Days ")
plt.ylabel(" Temprature ")
plt.show

# If we want to make own style to represent the graph also we can change background with ggplot

style.use("ggplot") # give ggplot parameter value to use() method
plt.plot(days, temperature, color= 'r', marker = 'o', linestyle='--', linewidth=3, markersize= 10 , label = " Temp Line")
plt.title("Delhi Temperature", fontsize=15)
plt.xlabel("days",fontsize=13)
plt.ylabel("temperature",fontsize=13)
plt.legend(loc = 4)
plt.show()

# If want to plot Multiple Lines Plot
days = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]
delhi_tem = [36.6, 37, 37.7,39,40.1,43,43.4,45,45.6,40.1,44,45,46.8,47,47.8]
mumbai_tem = [39,39.4,40,40.7,41,42.5,43.5,44,44.9,44,45,45.1,46,47,46]
 
plt.plot(days, delhi_tem, "mo--", linewidth = 3,
        markersize = 10, label = "Delhi tem")  #mo-- (Combination of = color, marker and linestyle)
 
plt.plot(days, mumbai_tem, "yo:", linewidth = 3,
        markersize = 10, label = "Mumbai tem}")
 
plt.title("Delhi  &amp; Mumbai Temperature", fontsize=15)
plt.xlabel("days",fontsize=13)
plt.ylabel("temperature",fontsize=13)
plt.legend(loc = 4)
plt.grid(color='c', linestyle='-', linewidth=2) # grid with parameter
plt.show()



"""2. ## Histogram

Matplotlib histogram is a representation of numeric data in the form of a rectangle bar. Each bar shows some data,  which belong to different categories. To plot histogram using python matplotlib library need plt.hist() method.

**Syntax: plt.hist(
x,
bins=None,
range=None,
density=None,
weights=None,
cumulative=False,
bottom=None,
histtype=’bar’,
align=’mid’,
orientation=’vertical’,
rwidth=None,
log=False,
color=None,
label=None,
stacked=False,
normed=None,
*,
data=None,
**kwargs,
)**
"""

# Let's take random values
ml_students_age = np.random.randint(18,45, (100))
py_students_age = np.random.randint(15,40, (100))
print(ml_students_age)
print(py_students_age)

# Let's plot the histogram for the student
plt.hist(ml_students_age)
 
plt.title("ML Students age histograms")
plt.xlabel("Students age cotegory")
plt.ylabel("No. Students age")
plt.show()

# Let take the data into bins

plt.hist(ml_students_age, bins=100) # Bins is range(limitation) of value
plt.title("ML Students age histograms")
plt.xlabel("Students age cotegory")
plt.ylabel("No. Students age")
plt.show()

# Let take the data into range bins

plt.hist(ml_students_age, bins=range(20, 50)) # Bins is range(limitation) of value
plt.title("ML Students age histograms")
plt.xlabel("Students age cotegory")
plt.ylabel("No. Students age")
plt.show()

bins = [15,20,25,30,35,40,45] # category of ML students age on x axis
plt.figure(figsize = (16,9)) # size of histogram in 16:9 format
 
 
plt.hist(ml_students_age, bins, rwidth=0.8, histtype = "bar",
         orientation='vertical', color = "m", label = "ML Student")
 
plt.title("ML Students age histograms")
plt.xlabel("Students age cotegory")
plt.ylabel("No. Students age")
plt.legend()
plt.show()

# Plotting two Histogram Using Matplotlib with parameters
bins =range(15, 45, 5)
style.use('ggplot') # return grid
plt.figure(figsize=(16,9))
plt.hist([ml_students_age, py_students_age],bins, rwidth=0.8, orientation='vertical', 
         color=['m','y'], label=["ML Student", "Py Student"])
plt.title("ML &amp; Py Students age histograms")
plt.xlabel("Students age cotegory")
plt.ylabel("No. Students age")
plt.legend()
plt.show()

"""3. ## Bar Chart
To visualize value associated with categorical data in the bar format use matplotlib bar chart plt.bar() or plt.barh() methods.

Syntax: plt.bar(
                             x,
                             height,
                             width=0.8,
                             bottom=None,
                             *,
                             align=’center’,
                             data=None,
                             **kwargs,
                             )
"""

# suppose we have the data of Indian Artificial Intelligence Production Class
classes = ["Python", "R", "AI", "ML", "DS"]
class1_students = [30, 10, 20, 25, 10] # out of 100 student in each class
class2_students = [40, 5, 20, 20, 10]
class3_students = [35, 5, 30, 15, 15]

plt.bar(classes, class1_students)

# To plot horizontal
plt.barh(classes, class1_students)

# Decorating bar chart using multiple functions.
plt.figure(figsize=(16,9))
plt.bar(classes, class1_students, width = 0.6, align = "edge", color = "k",
       edgecolor = "m", linewidth = 5, alpha = 0.9, linestyle = "--",
       label =" Class 1 Students") #visible=False
 
plt.title("Bar Chart of IAIP Class", fontsize = 18)
plt.xlabel("Classes",fontsize = 15)
plt.ylabel("No. of Students", fontsize = 15)
plt.show()

# Decorating bar chart using multiple functions.
plt.figure(figsize=(16,9))
 
plt.bar(classes, class1_students, width = 0.2, color = "b",
        label =" Class 1 Students") #visible=False
 
plt.bar(classes, class2_students, width = 0.2, color = "g",
        label =" Class 2 Students") 
 
plt.title("Bar Chart of IAIP Class", fontsize = 18)
plt.xlabel("Classes",fontsize = 15)
plt.ylabel("No. of Students", fontsize = 15)
plt.show()

"""The above code not generating two bar charts in one figure but they are overlapping. So use the below code to plot multiple bar charts. In below chart plot three bar charts using three different datasets."""

plt.figure(figsize=(16,9))
 
classes_index = np.arange(len(classes))
print(classes_index)
 
width = 0.2
 
plt.bar(classes_index, class1_students, width , color = "b",
        label =" Class 1 Students") #visible=False
 
plt.bar(classes_index + width, class2_students, width , color = "g",
        label =" Class 2 Students") 
 
plt.bar(classes_index + width + width, class3_students, width , color = "y",
        label =" Class 2 Students") 
 
plt.xticks(classes_index + width, classes, rotation = 20)
plt.title("Bar Chart of IAIP Class", fontsize = 18)
plt.xlabel("Classes",fontsize = 15)
plt.ylabel("No. of Students", fontsize = 15)
plt.show()

# To plot the horizontal
plt.figure(figsize=(16,9))
 
classes_index = np.arange(len(classes))
 
width = 0.2
 
plt.barh(classes_index, class1_students, width , color = "b",
        label =" Class 1 Students") #visible=False
 
plt.barh(classes_index + width, class2_students, width , color = "g",
        label =" Class 2 Students") 
 
plt.barh(classes_index + width + width, class3_students, width , color = "y",
        label =" Class 3 Students") 
 
plt.yticks(classes_index + width, classes, rotation = 20)
plt.title("Bar Chart of IAIP Class", fontsize = 18)
plt.ylabel("Classes",fontsize = 15)
plt.xlabel("No. of Students", fontsize = 15)
plt.legend()
plt.show()

"""4. ## Scatter Plot

The plt.scatter() function help to plot two-variable datasets in point or a user-defined format. Here, we will be plotting google play store apps scatter plot.
"""

import pandas as pd
df = pd.read_csv("/content/Google_Playstore_App.csv", encoding= 'unicode_escape')
df.head()

df.info()

df.shape

# Now need to take X and Y varible to show the in scatter 
X = df["Rating"]
Y = df["Reviews"]

plt.scatter(X,Y)
plt.title("Google Play Store Apps Scatter plot")
plt.xlabel("Rating")
plt.ylabel("Reviews")
plt.show()

plt.figure(figsize = (16,9)) # figure size ratio 16:9
plt.scatter(x,y, c = "r", marker = "*", s = 100, alpha=0.5, linewidths=10,
           edgecolors="g" )#verts="<"
plt.title("Google Play Store Apps Scatter plot")
plt.xlabel("Rating")
plt.ylabel("Reviews")
plt.show()

# Plot Two Scatter Plot in one plot
plt.figure(figsize = (16,9))
plt.scatter(x,y, c = "r", marker = "*", s = 100, alpha=0.5, linewidths=10, edgecolors="g" )#verts="<"
 
plt.scatter(x,df_google_play_store_apps["Installs"], c = "y", marker = "o", s = 100, alpha=0.5, linewidths=10,
           edgecolors="c" )
plt.title("Google Play Store Apps Scatter plot")
plt.xlabel("Rating")
plt.ylabel("Reviews &amp; Installs")
plt.show()

"""5. # Pie Chart

To draw pie char use plt.pie() function. The matplotkib plt.pie() function help to plot pie chart of given numeric data with labels. It also support different parameters which help to show better.

**Syntax: plt.pie(
[‘x’,
‘explode=None’,
‘labels=None’,
‘colors=None’,
‘autopct=None’,
‘pctdistance=0.6’,
‘shadow=False’,
‘labeldistance=1.1’,
‘startangle=None’,
‘radius=None’,
‘counterclock=True’,
‘wedgeprops=None’,
‘textprops=None’,
‘center=(0, 0)’,
‘frame=False’,
‘rotatelabels=False’,
‘*’,
‘data=None’],
)**
"""

plt.pie([1]) # Plot pie chart of value [1]
plt.show() # To show Pie chart

classes = ["Python", 'R', 'Machine Learning', 'Artificial Intelligence', 
           'Data Sciece']
class1_students = [45, 15, 35, 25, 30]

plt.pie(class1_students, labels = classes)
plt.show()

explode = [0.03,0,0.1,0,0] # To slice the perticuler section
colors = ["c", 'b','r','y','g'] # Color of each section
textprops = {"fontsize":15} # Font size of text in pie chart
 
plt.pie(class1_students, # Values
        labels = classes, # Labels for each sections
        explode = explode, # To slice the perticuler section
        colors =colors, # Color of each section
        autopct = "%0.2f%%", # Show data in persentage for with 2 decimal point
        shadow = True, # Showing shadow of pie chart
        radius = 1.4, # Radius to increase or decrease the size of pie chart 
        startangle = 270, # Start angle of first section
        textprops =textprops) 
plt.legend()
plt.show() # To show pie chart only

import numpy as np
plt.figure(figsize=(7,4))
#plt.figure(figsize=(16,9)
 
colors = ['r','w','r','w','r','w','r','w','r','w','r','w','r','w','r','w','r','w','r','w']
labels = np.ones(20)
#labels = [1.0,1.0,1.0,1.0,1.0,.........,1.0]
 
plt.pie([1], colors="k", radius = 2.05)
plt.pie(labels, colors=colors, radius = 2.0)
 
plt.pie([1], colors="g", radius = 1.8)
plt.pie([1], colors="y", radius = 1.6)
plt.pie([1], colors="c", radius = 1.3)
plt.pie([1], colors="b", radius = 1.1)
plt.pie([1], colors="m", radius = 0.9)
 
plt.pie([1], colors="b", radius = 0.31)
plt.pie(labels, colors=colors, radius = 0.3)
 
plt.pie([1], colors="w", radius = 0.2)
plt.pie([1], colors="k", radius = 0.1)
 
plt.show()

"""# 6. Sub - Plot
Sometimes it is helpful to compare different views of data side by side. To this end, Matplotlib has the concept of subplots: groups of smaller axes that can exist together within a single figure. These subplots might be insets, grids of plots, or other more complicated layouts. In this section we'll explore four routines for creating subplots in Matplotlib.
"""

# Create 4 subplot (2- rows and 2 - columns)
plt.subplot(2,2,1)
 
plt.subplot(2,2,2)
 
plt.subplot(2,2,3)
 
plt.subplot(2,2,4)
 
plt.show()

plt.subplot(2,2,1)
plt.pie([1])
 
plt.subplot(2,2,2)
plt.pie([1,2])
 
plt.subplot(2,2,3)
plt.pie([1,2,3])
 
plt.subplot(2,2,4)
plt.pie([1,2,2,4])
 
plt.show()

fig, ax = plt.subplots(2, 3, sharex='col', sharey='row')

grid = plt.GridSpec(2, 3, wspace=0.8, hspace=0.5)
plt.subplot(grid[0, 0])
plt.subplot(grid[0, 1:])
plt.subplot(grid[1, :2])
plt.subplot(grid[1, 2])
plt.show()

# First create some toy data: 
x = np.linspace(0, 1.5 * np.pi, 100) 
y = np.sin(x**2)+np.cos(x**2) 
  
fig, axs = plt.subplots(2, 2, 
                        subplot_kw = dict(polar = True)) 
axs[0, 0].plot(x, y) 
axs[1, 1].scatter(x, y) 
  
fig.suptitle('matplotlib.pyplot.subplots() Example') 
plt.show()

plt.figure(figsize=(16,16))


plt.subplot(3,2,1)
#plt.subplot(321)
#********************************************Line Plot
days = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]
delhi_tem = [36.6, 37, 37.7,39,40.1,43,43.4,45,45.6,40.1,44,45,46.8,47,47.8]
mumbai_tem = [39,39.4,40,40.7,41,42.5,43.5,44,44.9,44,45,45.1,46,47,46]
 
plt.plot(days, delhi_tem, "mo--", linewidth = 3,
        markersize = 10, label = "Delhi tem")
 
plt.plot(days, mumbai_tem, "yo:", linewidth = 3,
        markersize = 10, label = "Mumbai tem}")
 
plt.title("Delhi  &amp; Mumbai Temperature Line Plot", fontsize=15)
plt.xlabel("days",fontsize=13)
plt.ylabel("temperature",fontsize=13)
plt.legend(loc = 4)
plt.grid(color='w', linestyle='-', linewidth=2)
#---------------------------------------------------------------end




plt.subplot(3,2,2) 
##-------------------------------------------------start
#****************************************************************histograms
ml_students_age = np.random.randint(18,45, (100))
py_students_age = np.random.randint(15,40, (100))
bins = [15,20,25,30,35,40,45]
 
plt.hist([ml_students_age, py_students_age], bins, rwidth=0.8, histtype = "bar",
         orientation='vertical', color = ["m", "y"], label = ["ML Student", "Py Student"])
 
plt.title("ML &amp; Py Students age histograms")
plt.xlabel("Students age cotegory")
#----------------------------------------------------------------------end



plt.subplot(3,2,3) 
##--------------------------------------------start
#************************************************************Bar Chart
classes = ["Python", "R", "AI", "ML", "DS"]
class1_students = [30, 10, 20, 25, 10] # out of 100 student in each class
class2_students = [40, 5, 20, 20, 10]
class3_students = [35, 5, 30, 15, 15]
classes_index = np.arange(len(classes))
 
width = 0.2
 
plt.barh(classes_index, class1_students, width , color = "b",
        label =" Class 1 Students") #visible=False
 
plt.barh(classes_index + width, class2_students, width , color = "g",
        label =" Class 2 Students") 
 
plt.barh(classes_index + width + width, class3_students, width , color = "y",
        label =" Class 3 Students") 
 
plt.yticks(classes_index + width, classes, rotation = 20)
plt.title("Bar Chart of IAIP Class Bar Chart", fontsize = 18)
plt.ylabel("Classes",fontsize = 15)
plt.xlabel("No. of Students", fontsize = 15)
plt.legend()
#--------------------------------------------------------------------end
 

plt.subplot(3,2,4) 
plt.pie([1,2])
'''
##------------------------------------------------start
#**************************************************************Scatter Plot
df_google_play_store_apps = df.copy()
x = df_google_play_store_apps["Rating"]
y = df_google_play_store_apps["Reviews"]
plt.scatter(x,y, c = "r", marker = "*", s = 100, alpha=0.5, linewidths=10,
           edgecolors="g" )#verts="<"
 
plt.scatter(x,df_google_play_store_apps["Installs"], c = "y", marker = "o", s = 100, alpha=0.5, linewidths=10,
           edgecolors="c" )
plt.title("Google Play Store Apps Scatter plot")
plt.xlabel("Rating")
plt.ylabel("Reviews &amp; Installs")
#----------------------------------------------------------------------end
'''



plt.subplot(3,2,5) 
##-----------------------------------------start
#*************************************************************Pie plot
classes = ["Python", 'R', 'Machine Learning', 'Artificial Intelligence', 
           'Data Sciece']
class1_students = [45, 15, 35, 25, 30]
explode = [0.03,0,0.1,0,0]
colors = ["c", 'b','r','y','g']
textprops = {"fontsize":15}
 
plt.pie(class1_students, 
        labels = classes, 
        explode = explode, 
        colors =colors, 
        autopct = "%0.2f%%", 
        shadow = True, 
        radius = 1.4,
       startangle = 270, 
        textprops =textprops)
#------------------------------------------------------end

plt.subplot(3,2,6, projection='polar', facecolor='k' ,frameon=True)
 

 
plt.show()

"""## 7. Read & Show Image Using Imread() & Plt.Imshow()"""

import matplotlib.image as mpimg

# Reading Image
img = mpimg.imread("/content/BARCHART.png") # give addres of image location
print(img)

"""Above you can see, when we call img then got numpy array but how. because mpimg.imread() function read pie_char.png image and store in numpy array format."""

# Get more information about img.

print("Data type of img > ", type(img))
print("Shape of img > ", img.shape)
print("Dimention of img > ",img.ndim)

"""#### Show Image using matplotlib imshow
Syntax :plt.imshow(
                            X,                                      cmap=None,
                                     norm=None,
                                     aspect=None,
                                     interpolation=None,
                                     alpha=None,
                                     vmin=None,
                                     vmax=None,
                                     origin=None,
                                     extent=None,
                                     shape=None,
                                     filternorm=1,
                                     filterrad=4.0,
                                     imlim=None,
                                     resample=None,
                                     url=None,
                                     *,
                                     data=None,
                                     **kwargs,
                                     )
"""

# Show Image using matplotlib imshow
plt.imshow(img)
plt.show

# Now, removing the axis and increase figure size and then show the same image.
plt.figure(figsize=(16,9))
plt.axis("off") # It will remove the axis from the images
plt.imshow(img)
plt.colorbar() # it will show the used color scale
plt.show

# Show Image with cmap Parameter
# To use the cmap, we need to pass single_channel to extract the cmap color
single_channel = img[:,:,1] # get single channel data from img
plt.figure(figsize=(16,9))
plt.axis("off")
plt.imshow(single_channel, cmap = "Accent") # show image with hot color map
plt.colorbar()
plt.show()

# If you want to show an image using a folder path, then follow the below code.
img2 = ("/content/matplotlib-imshow-model-5-min.png", encoding='unicode_escape')
plt.figure(figsize=(16,9))
plt.axis("off")
plt.imshow(img2)
plt.colorbar()
plt.show()

# Model image shows with hot color maps (cmap)
single_channel2_img = img2[:,:,1]
plt.figure(figsize=(16,9))
plt.axis("off")
plt.imshow(single_channel2_img, cmap="hot")
plt.colorbar()
plt.savefig("model_hot.png")
plt.show()

"""If we will generate an image with all cmaps then it takes more time. So for that follow the below code.

Below code get cmaps name as a string and split all cmap name as a single item of a list cmap_name_list
"""

cmap = """Accent, Accent_r, Blues, Blues_r, BrBG, BrBG_r, BuGn, BuGn_r, BuPu, BuPu_r, CMRmap, CMRmap_r, Dark2, Dark2_r, GnBu, GnBu_r, Greens, Greens_r, Greys, Greys_r, OrRd, OrRd_r, Oranges, Oranges_r, PRGn, PRGn_r, Paired, Paired_r, Pastel1, Pastel1_r, Pastel2, Pastel2_r, PiYG, PiYG_r, PuBu, PuBuGn, PuBuGn_r, PuBu_r, PuOr, PuOr_r, PuRd, PuRd_r, Purples, Purples_r, RdBu, RdBu_r, RdGy, RdGy_r, RdPu, RdPu_r, RdYlBu, RdYlBu_r, RdYlGn, RdYlGn_r, Reds, Reds_r, Set1, Set1_r, Set2, Set2_r, Set3, Set3_r, Spectral, Spectral_r, Wistia, Wistia_r, YlGn, YlGnBu, YlGnBu_r, YlGn_r, YlOrBr, YlOrBr_r, YlOrRd, YlOrRd_r, afmhot, afmhot_r, autumn, autumn_r, binary, binary_r, bone, bone_r, brg, brg_r, bwr, bwr_r, cividis, cividis_r, cool, cool_r, coolwarm, coolwarm_r, copper, copper_r, cubehelix, cubehelix_r, flag, flag_r, gist_earth, gist_earth_r, gist_gray, gist_gray_r, gist_heat, gist_heat_r, gist_ncar, gist_ncar_r, gist_rainbow, gist_rainbow_r, gist_stern, gist_stern_r, gist_yarg, gist_yarg_r, gnuplot, gnuplot2, gnuplot2_r, gnuplot_r, gray, gray_r, hot, hot_r, hsv, hsv_r, inferno, inferno_r, jet, jet_r, magma, magma_r, nipy_spectral, nipy_spectral_r, ocean, ocean_r, pink, pink_r, plasma, plasma_r, prism, prism_r, rainbow, rainbow_r, seismic, seismic_r, spring, spring_r, summer, summer_r, tab10, tab10_r, tab20, tab20_r, tab20b, tab20b_r, tab20c, tab20c_r, terrain, terrain_r, twilight, twilight_r, twilight_shifted, twilight_shifted_r, viridis, viridis_r, winter, winter_r"""
 
cmap_name_list = cmap.split(sep = ", ")

save_image_addr_name = []
for i in range(len(cmap_name_list)):
    cmap_str = cmap_name_list[i]
    save_image_addr_name.append("D:\\\cmap_image\\\_"+"girl_" + cmap_name_list[i] + ".png")
    print(save_image_addr_name[i])

#Using cmap_name_list and save_image_addr_name generate cmap image and save it define location with unique address.
for i in range(len(cmap_name_list)): 
    cmap_name = cmap_name_list[i]
    plt.figure(figsize=(16,9))
    plt.axis("off")
     
    print(cmap_name)
 
    plt.imshow(single_channel2_img, cmap=cmap_name)
    #plt.colorbar()
    #save_image_name1 = "D:\\cmap_image\\"+"girl" + cmap_list[i]
    print(save_image_addr_name[i])
    plt.savefig(save_image_addr_name[i], orientation='portrate', facecolor= "k")
    plt.show()